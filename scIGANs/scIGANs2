#!/bin/bash
## parsing the arguments
## last update: 2023/02/23
version="scIGANs_1.1.2"

epochs=200 # number of epochs for training
sim_size=200 # number of simulated datasets for imputation
knn_k=10 # number of the neighbours used for imputation
label="" # file path for cell labels
batch_size=8 #
PARAMS=""
impute=""
latent_dim=100
threshold=0.001 ## the convergence threshold; training will stop if the dM < threshold
job_name=""
input_image=0
add_noise=0
do_partition=0
partition_method=0
partitions_nreps=5
partitions_overlap_size=80
dropout_percentile=65
#e_matrix=$1 ## the first argument is the input expression matrix
help_message (){
    echo "--------------"
	echo $version
    echo "--------------"
    echo ""
    echo "USAGE: scIGANs2 <in.matrix.txt> [-tl in.tech.label.txt] [-cl in.ct.label.txt] [options]"
    echo ""
    echo "in.matrix.txt A tab-delimited text file, containing the expression counts with genes in rows and cells in columns. The first row is header and first column is gene IDs or names. <required>"
	echo "-h | --help		show this message"
	echo "-tl | --technology_label_file <string>	required	give the labels of the generating technologies of the scRNA-seq data, with the same order of the colounms in expression matrix"
	echo "-cl | --cell_type_label_file <string>	optional	give the label of cell type or subpopulation for each cell, with the same order of the colounms in expression matrix."
	echo "-e | --epoch <integer>	optional	set the number of epochs of training. Default = 200"
	echo "-s | --sim_size <integer>	optional	set the number of generated data for imputation. Default = 200"
	echo "-k | --knn_k <integer>	optional	set the number of nearest neighbours used for imputation. Default = 10"
	echo "-d | --latent_dim <integer>	optional	dimension of the latent space of generator. Default = 100"
	echo "-b | --batch_size <integer>	optional	how many samples per batch to load. More samples per batch requires more memory. Default = 8; max=number_of_cells"
	echo "-t | --threshold <integer>	optional	convergence threshold. Default = 0.01"
	echo "--impute	optional	Set this option to skip training and directly impute using pretrained model for the same input settings."
	echo "-j | --job_name <string>	optional	user-defined job name (a string without spaces), which will be used to name the output files."
	echo "-o | --outdir <string>	optional	set the path where to write the imputed matrix. Default: current working directory (pwd)."
	echo "-i | --input_image <integer>	indicator whether the generator should be given image data (1) or noise (0) as input. In the first case, the generator output will undergo dropout during training"
	echo "-dp | --do_partition <integer>	indicator whether partitioning should be done or not"
	echo "-pm | --partition_method <integer>	0 for single partition without overlaps, 1 for random partition with nrep repeats, 2 for single partition with overlaps"
  echo "-pn | --partitions_nreps <integer> number of repetitions of partitioning"
  echo "-po | --partitions_overlap_size <integer> number of genes in overlaps between partitions"
  echo "-dr | --dropout_percentile <integer> percentile under which gene expression values are more likely to be dropped out"
	echo "-n | --add_noise <integer>	indicator whether noise should be added to generator input"
    exit
}

outdir=`pwd`
Bashdir=$(dirname $BASH_SOURCE)

while (( "$#" )); do
  case "$1" in
    -tl|--technology_label_file)
      tech_label=$2
      shift 2
      ;;
    -cl|--cell_type_label_file)
      ct_label=$2
      shift 2
      ;;
    -e|--epoch)
      epochs=$2
      shift 2
      ;;
    -s|--sim_size)
      sim_size=$2
      shift 2
      ;;
    -k|--knn_k)
      knn_k=$2
      shift 2
      ;;
    -b|--batch_size)
      batch_size=$2
      shift 2
      ;;
    -d|--latent_dim)
      latent_dim=$2
      shift 2
      ;;
    -t|--threshold)
      threshold=$2
      shift 2
      ;;
    -j|--job_name)
      job_name=$2
      shift 2
      ;;
    -o|--outdir)
      outdir=$2
      mkdir -p $outdir
      shift 2
      ;;
      -i|--input_image)
      input_image=$2
      shift 2
      ;;
    -n|--add_noise)
      add_noise=$2
      shift 2
      ;;
    -dp|--do_partition)
      do_partition=$2
      shift 2
      ;;
    -pm|--partition_method)
      partition_method=$2
      shift 2
      ;;
    -pn|--partitions_nreps)
      partitions_nreps=$2
      shift 2
      ;;
    -po|--partitions_overlap_size)
      partitions_overlap_size=$2
      shift 2
      ;;
    -dr|--dropout_percentile)
      dropout_percentile=$2
      shift 2
      ;;
    --impute)
      impute="impute"
      shift
      ;;
    -h|--help)
    help_message
    shift
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported argument $1" >&2
      help_message
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"
# print out the help message if no option provided
if [ -z "$PARAMS" ]
then
    help_message
fi
e_matrix=$(awk -v OFS=" " '{print $1}' <<< $PARAMS)
set -e

timestamp=$(date '+%Y%m%d%H%M')
fname=`basename $e_matrix` ## get the filename without path
if [ -z "$ct_label" ]
then
	lname="noLabel"
else
	lname=`basename $ct_label`
fi
if [ -z "$job_name" ]
then
job_name=$fname"_"$lname
fi
# create a tmp folder for intermediate outputs
tmpdir=$outdir'/scIGANs_'$job_name'_tmp'$timestamp
mkdir -p $tmpdir
# the log file
logfile=$tmpdir".log" 

echo ""
echo $version
echo $version >> $logfile
echo "" >> $logfile
python_path=python # default python
Rscript_path=Rscript # default R
if [ -n "$CONDA_PREFIX" ] ## check if running within a conda evn, and then use the python and R from conda env
then
echo "scIGANs is running in a conda environment: "$CONDA_DEFAULT_ENV
python_path=$CONDA_PREFIX/bin/python
Rscript_path=$CONDA_PREFIX/bin/Rscript
fi
echo ""
echo "Prechecking input files..."
echo $(date)"	Prechecking input files..." >> $logfile
$Rscript_path ${Bashdir}/src/inpro2.R ${e_matrix} $tmpdir $logfile $ct_label $tech_label 2>&1 | tee -a $logfile
if [ $? -ne 0 ]
then
	exit 1
fi
while read line; do
par+=($line)
done < $tmpdir/args

img_size=${par[0]}
ct_ncls=${par[1]}
ct_label=${par[2]}
tech_ncls=${par[3]}
tech_label=${par[4]}

echo ""
if [ "$impute" == "" ]
then
	echo "Training..."
	echo "" >> $logfile
	echo $(date)"	Training..." >> $logfile
	echo ""
	echo "Command for training:" >> $logfile
	echo "	"--file_d=$tmpdir/${fname} --file_c=$ct_label --file_t=$tech_label --ct_ncls=$ct_ncls --tech_ncls=$tech_ncls --img_size=$img_size --n_epochs=$epochs --sim_size=$sim_size --knn_k=$knn_k --batch_size=$batch_size --latent_dim=$latent_dim --threshold=$threshold --train >> $logfile
	$python_path ${Bashdir}/src/imputeByGans2.py --file_d=$tmpdir/${fname} --file_c=$ct_label --file_t=$tech_label --ct_ncls=$ct_ncls --tech_ncls=$tech_ncls --img_size=$img_size --n_epochs=$epochs --sim_size=$sim_size --knn_k=$knn_k --batch_size=$batch_size --latent_dim=$latent_dim --threshold=$threshold --train --job_name $job_name --outdir $outdir --input_image $input_image --add_noise $add_noise --do_partition $do_partition --partition_method $partition_method --partitions_nreps $partitions_nreps --partitions_overlap_size $partitions_overlap_size --dropout_percentile $dropout_percentile #2>&1 | tee -a $logfile
	echo "Imputing..."
	echo "" >> $logfile
	echo $(date)"	Imputing..." >> $logfile
	echo ""
	echo "Command for Imputing:" >> $logfile
	echo "	"--file_d=$tmpdir/${fname} --file_c=$ct_label --file_t=$tech_label --ct_ncls=$ct_ncls --tech_ncls=$tech_ncls --img_size=$img_size --n_epochs=$epochs --sim_size=$sim_size --knn_k=$knn_k --latent_dim=$latent_dim --impute >> $logfile
	$python_path ${Bashdir}/src/imputeByGans2.py --file_d=$tmpdir/${fname} --file_c=$ct_label --file_t=$tech_label --ct_ncls=$ct_ncls --tech_ncls=$tech_ncls --img_size=$img_size --n_epochs=$epochs --sim_size=$sim_size --knn_k=$knn_k --latent_dim=$latent_dim --impute --job_name $job_name --outdir $outdir --input_image $input_image --add_noise $add_noise --do_partition $do_partition --partition_method $partition_method --partitions_nreps $partitions_nreps --partitions_overlap_size $partitions_overlap_size --dropout_percentile $dropout_percentile #2>&1 | tee -a $logfile
else
	echo "Imputing..."
	echo "" >> $logfile
	echo $(date)"	Imputing..." >> $logfile
	echo ""
	echo "Command for Imputing:" >> $logfile
	echo "	"--file_d=$tmpdir/${fname} --file_c=$ct_label --file_t=$tech_label --ct_ncls=$ct_ncls --tech_ncls=$tech_ncls --img_size=$img_size --n_epochs=$epochs --sim_size=$sim_size --knn_k=$knn_k --latent_dim=$latent_dim --impute >> $logfile
	$python_path ${Bashdir}/src/imputeByGans2.py --file_d=$tmpdir/${fname} --file_c=$ct_label --file_t=$tech_label --ct_ncls=$ct_ncls --tech_ncls=$tech_ncls --img_size=$img_size --n_epochs=$epochs --sim_size=$sim_size --knn_k=$knn_k --latent_dim=$latent_dim --impute --job_name $job_name --outdir $outdir --input_image $input_image --add_noise $add_noise --do_partition $do_partition --partition_method $partition_method --partitions_nreps $partitions_nreps --partitions_overlap_size $partitions_overlap_size --dropout_percentile $dropout_percentile #2>&1 | tee -a $logfile
fi
if [ $? -eq 0 ]
then
	$Rscript_path ${Bashdir}/src/outpro.R $job_name $tmpdir $outdir $timestamp 2>&1 | tee -a $logfile
fi
rm -r $tmpdir
